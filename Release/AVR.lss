
AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c6  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_init>:
  6c:	88 e1       	ldi	r24, 0x18	; 24
  6e:	8a b9       	out	0x0a, r24	; 10
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32
  74:	83 e3       	ldi	r24, 0x33	; 51
  76:	89 b9       	out	0x09, r24	; 9
  78:	08 95       	ret

0000007a <uart_send>:
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <uart_send>
  7e:	8c b9       	out	0x0c, r24	; 12
  80:	08 95       	ret

00000082 <uart_receave>:
  82:	5f 9b       	sbis	0x0b, 7	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <uart_receave>
  86:	8c b1       	in	r24, 0x0c	; 12
  88:	08 95       	ret

0000008a <uart_send_pktBCD>:
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
  8e:	82 95       	swap	r24
  90:	8f 70       	andi	r24, 0x0F	; 15
  92:	80 5d       	subi	r24, 0xD0	; 208
  94:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_send>
  98:	8c 2f       	mov	r24, r28
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	80 5d       	subi	r24, 0xD0	; 208
  9e:	cf 91       	pop	r28
  a0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <uart_send>

000000a4 <main>:
  a4:	0e 94 36 00 	call	0x6c	; 0x6c <uart_init>
  a8:	80 e5       	ldi	r24, 0x50	; 80
  aa:	0e 94 3d 00 	call	0x7a	; 0x7a <uart_send>
  ae:	2f e7       	ldi	r18, 0x7F	; 127
  b0:	88 e3       	ldi	r24, 0x38	; 56
  b2:	91 e0       	ldi	r25, 0x01	; 1
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x10>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x1a>
  be:	00 00       	nop
  c0:	f3 cf       	rjmp	.-26     	; 0xa8 <main+0x4>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
